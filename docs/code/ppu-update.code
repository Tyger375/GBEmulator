// Here the cycles parameter is the number of M-Cycles (4 clock cycles)
void update(u32 cycles, Memory& mem) {
    // Check if LCD Control enable flag is set
    Byte LCDC = mem[LCDC_REG];
    if ((LCDC & 0x80) == 0) return;

    switch (mode) {
        case 2: {
            // OAM scan mode
            // Right now, it just increments total_cycles
            oam_scan(cycles, mem);
            break;
        }
        case 3: {
            // Drawing mode
            // Right now, it just increments total_cycles
            draw(cycles, mem);
            break;
        }
        case 0: {
            // H-Blank mode
            for (u32 i = 0; i < cycles / 2; ++i) {
                total_cycles += 2;
                // Doing nothing until we hit 456 clock cycles
                if (total_cycles >= 456) {
                    total_cycles = 0;
                    // Finally incrementing LY
                    mem[LY_REG]++;
                    if (mem[LY_REG] >= 144) {
                        mode = 1;
                    } else {
                        mode = 2;
                    }
                }
            }
            break;
        }
        case 1: {
            //V-Blank mode
            for (u32 i = 0; i < cycles / 2; ++i) {
                total_cycles += 2;
                if (total_cycles >= 456) {
                    total_cycles = 0;
                    mem[LY_REG]++;
                    if (mem[LY_REG] >= 154) {
                        mode = 2;
                    }
                }
            }
            break;
        }
    }


    Byte LY = mem[LY_REG];
    Byte LYC = mem[LYC_REG];

    // Updating LCD Status register
    Byte value = mem[LCDS_REG] & (~0b111);
    value |= (LY == LYC) << 2;
    value |= mode & 0b11;
    mem[LCDS_REG] = value;

    // Firing STAT interrupts
    const Byte status = mem[LCDS_REG];
    if (status & (1 << 6) && LY == LYC) {
        request_stat_interrupt(mem);
    }
    if (status & (1 << 5) && mode == 2) {
        request_stat_interrupt(mem);
    }
    if (status & (1 << 4) && mode == 1) {
        request_stat_interrupt(mem);
    }
    if (status & (1 << 3) && mode == 0) {
        request_stat_interrupt(mem);
    }
}