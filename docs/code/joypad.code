bool Joypad::keyboard_event(const SDL_Event &event) {
    if (event.type != SDL_EVENT_KEY_DOWN && event.type != SDL_EVENT_KEY_UP) return false;
    const bool new_value = event.key.down;

    switch (event.key.key) {
        case SDLK_A: {
            A = new_value;
            break;
        }
        case SDLK_B: {
            B = new_value;
            break;
        }

        case SDLK_T: {
            start = new_value;
            break;
        }
        case SDLK_Y: {
            select = new_value;
            break;
        }

        case SDLK_UP: {
            up = new_value;
            break;
        }
        case SDLK_DOWN: {
            down = new_value;
            break;
        }
        case SDLK_LEFT: {
            left = new_value;
            break;
        }
        case SDLK_RIGHT: {
            right = new_value;
            break;
        }
        default: {
            return false;
        }
    }
    return true;
}

void Joypad::update(Memory& mem) {
    Byte Joypad = mem[JOYPAD_REG];

    Byte values = 0x0;
    bool select_buttons = (Joypad & 0b100000) == 0;
    bool select_dpad    = (Joypad & 0b10000) == 0;

    if (select_buttons) {
        values |= !start << 3;
        values |= !select << 2;
        values |= !B << 1;
        values |= !A;
    }

    if (select_dpad) {
        values |= !down << 3;
        values |= !up << 2;
        values |= !left << 1;
        values |= !right;
    }

    if (!select_buttons && !select_dpad)
        values = 0xF;

    Joypad |= values;
    mem[JOYPAD_REG] = Joypad;

    if (is_interrupt(Joypad, old_values)) {
        mem[IF_REG] |= 1 << 4; // Calling interrupt
    }

    old_values = Joypad;
}